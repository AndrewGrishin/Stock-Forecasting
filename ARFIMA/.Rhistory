getwd()
setwd("/Users/forci/Desktop/Diploma Data and Project/Stock-Forecasting/")
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv")
View(stock_prices)
open_prices <- stock_prices$Open
dates <- stock_prices$Date
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(dates, open_prices)
plot(dates, open_prices, type = "l")
open_prices
plot(open_prices, type = "l")
?fracdiff
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv")
open_prices <- stock_prices$Open
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(open_prices, type = "l", )
test_ration <- 0.3
train <- open_prices[1:floor((1 - test_ration) * length(open_prices))]
test <- open_prices[
(floor(test_ration * length(open_prices)) + 1):length(open_prices)
]
train
trest
test
library(pracma)
library(fracdiff)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv")
open_prices <- stock_prices$Open
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(open_prices, type = "l", )
# Train test split
test_ration <- 0.3
train <- open_prices[1:floor((1 - test_ration) * length(open_prices))]
test <- open_prices[
(floor(test_ration * length(open_prices)) + 1):length(open_prices)
]
hurstexp(open_prices)
fracdiff(open_prices)
acf(open_prices, lag.max = 50, type = "correlation", ylim = c(-1, 1))
pacf(open_prices, lag.max = 50, ylim = c(-1, 1))
acf(open_prices, lag.max = 50, type = "correlation", ylim = c(-1, 1))
pacf(open_prices, lag.max = 50, ylim = c(-1, 1))
acf(open_prices, lag.max = 50, type = "correlation", ylim = c(-1, 1))
pacf(open_prices, lag.max = 50, ylim = c(-1, 1))
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
acf(open_prices, lag.max = 50, type = "correlation", ylim = c(-1, 1))
pacf(open_prices, lag.max = 50, ylim = c(-1, 1))
acf(open_prices, lag.max = 200, type = "correlation", ylim = c(-1, 1))
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(open_adj, type = "l", )
# Train test split
test_ration <- 0.3
train <- open_adj[1:floor((1 - test_ration) * length(open_adj))]
test <- open_adj[
(floor(test_ration * length(open_adj)) + 1):length(open_adj)
]
hurstexp(open_adj)
fracdiff(open_adj, h)
fracdiff(open_adj)
acf(open_adj, lag.max = 200, type = "correlation", ylim = c(-1, 1))
pacf(open_adj, lag.max = 50, ylim = c(-1, 1))
mean(open_adj)
model <- fracdiff(open_adj)
model
model <- fracdiff(open_adj, h = 1e-6)
model
summary(model)
model <- fracdiff(open_adj, h = 1e-9)
summary(model)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(open_adj, type = "l", )
# Train test split
test_ration <- 0.3
train <- open_adj[1:floor((1 - test_ration) * length(open_adj))]
test <- open_adj[
(floor(test_ration * length(open_adj)) + 1):length(open_adj)
]
hurstexp(open_adj)
model <- fracdiff(open_adj, h = 1e-10)
summary(model)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/American Companies/AMZN 1997 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
# Train test split
test_ration <- 0.3
train <- open_adj[1:floor((1 - test_ration) * length(open_adj))]
test <- open_adj[
(floor(test_ration * length(open_adj)) + 1):length(open_adj)
]
hurstexp(open_adj)
model <- fracdiff(open_adj, h = 1e-10)
summary(model)
model <- fracdiff(open_adj)
summary(model)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/American Companies/AMZN 1997 2022.csv")
open_prices <- stock_prices$Open[-1] / stock_prices$Open[-length(stock_prices$Open)] - 1
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(open_adj)
# Train test split
test_ration <- 0.3
train <- open_adj[1:floor((1 - test_ration) * length(open_adj))]
test <- open_adj[
(floor(test_ration * length(open_adj)) + 1):length(open_adj)
]
hurstexp(open_adj)
model <- fracdiff(open_adj)
summary(model)
acf(open_adj, lag.max = 200, type = "correlation", ylim = c(-1, 1))
pacf(open_adj, lag.max = 50, ylim = c(-1, 1))
mean(open_adj)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/American Companies/AMZN 1997 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
plot(open_adj)
# Train test split
test_ration <- 0.3
train <- open_adj[1:floor((1 - test_ration) * length(open_adj))]
test <- open_adj[
(floor(test_ration * length(open_adj)) + 1):length(open_adj)
]
hurstexp(open_adj)
model <- fracdiff(open_adj)
summary(model)
acf(open_adj, lag.max = 200, type = "correlation", ylim = c(-1, 1))
pacf(open_adj, lag.max = 50, ylim = c(-1, 1))
mean(open_adj)
model <- fracdiff(open_adj, h = 1e-10)
summary(model)
?hurstexp
hurstexp(open_adj, d = 2)
hurstexp(open_adj, d = 10)
model <- fracdiff(open_adj, h = 1e-10)
summary(model)
stock_prices <- read.csv("./Data/Chinese Companies/China Life Insurance Company Limited 2007 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
stock_prices <- read.csv("./Data/Chinese Companies/Anhui Coonch Cement 2002 2022.csv")
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/Chinese Companies/Anhui Coonch Cement 2002 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/Chinese Companies/China Duty Free Group 2009 2022.csv")
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/Chinese Companies/China Duty Free Group 2009 2022.csv")
stock_prices <- na.omit(stock_prices)
open_prices <- stock_prices$Open
open_adj <- open_prices - mean(open_prices)
stock_prices <- read.csv("./Data/Chinese Companies/China Duty Free Group 2009 2022.csv")
open_prices <- stock_prices$Open
open_prices <- na.omit(open_prices)
open_adj <- open_prices - mean(open_prices)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/Chinese Companies/China Duty Free Group 2009 2022.csv")
open_prices <- stock_prices$Open
open_prices <- na.omit(open_prices)
open_prices
open_prices <- as.numeric(na.omit(open_prices))
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/Chinese Companies/China Duty Free Group 2009 2022.csv", na.strings =  "null")
open_prices <- stock_prices$Open
open_prices <- as.numeric(na.omit(open_prices))
open_prices
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
mean(open_adj)
plot(open_adj, type = "l")
hurstexp(open_adj, d = 10)
model <- fracdiff(open_adj, h = 1e-10)
model <- fracdiff(open_adj)
model <- arfima(open_prices)
library(forecast)
model <- arfima(open_prices)
summary(model)
model <- arfima(open_prices, estim = "ls")
summary(model)
library(pracma)
library(fracdiff)
stock_prices <- read.csv("./Data/Chinese Companies/China Duty Free Group 2009 2022.csv", na.strings =  "null")
open_prices <- stock_prices$Open
open_prices <- as.numeric(na.omit(open_prices))
open_prices
open_adj <- open_prices - mean(open_prices)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
mean(open_adj)
plot(open_adj, type = "l")
# Train test split
test_ration <- 0.3
train <- open_adj[1:floor((1 - test_ration) * length(open_adj))]
test <- open_adj[
(floor(test_ration * length(open_adj)) + 1):length(open_adj)
]
hurstexp(open_adj, d = 10)
model <- fracdiff(open_adj)
summary(model)
acf(open_adj, lag.max = 200, type = "correlation", ylim = c(-1, 1))
pacf(open_adj, lag.max = 50, ylim = c(-1, 1))
library(forecast)
model <- arfima(train, estim = "ls")
summary(model)
forecast(model, h = 2, level = 95)
test
library(pracma)
library(fracdiff)
library(forecast)
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv", na.strings =  "null")
open_prices <- stock_prices$Open
open_prices <- as.numeric(na.omit(open_prices))
length(lag(open_prices)); length(open_prices)
lag(open_prices)[1:20]
open_prices[1:20]
?lag
stats::lag(open_prices)
stats::lag(open_prices)[1:10]
open_prices[1:10]
stats::lag(open_prices, 2)[1:10]
diff(open_prices)
?diff
library(pracma) # Hurst exponent estimation
library(fracdiff) # for arfime
library(forecast) # for arfima and forecasting
library(tseries) # for kpss test (unit root)
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv", na.strings =  "null")
open_prices <- stock_prices$Open
open_prices <- as.numeric(na.omit(open_prices))
?tseries::adf.test
tseries::adf.test(open_prices)
tseries::adf.test(open_prices, k = 0)
# Проверка ряда на стационарность
tseries::adf.test(open_prices, k = 0)
tseries::adf.test(open_prices)
tseries::adf.test(open_prices, k = 50)
tseries::adf.test(open_prices, k = 50)
test_res <- tseries::adf.test(open_prices, k = 50)
test_res$p.value
rm(test_res)
for (i in 0:60) {
cat(i, tseries::adf.test(open_prices, k = 50)$p.value)
}
for (i in 0:60) {
cat(i, tseries::adf.test(open_prices, k = 50)$p.value, "\n")
}
for (i in 0:60) {
cat("Lag: ",i, " P value: ", tseries::adf.test(open_prices, k = i)$p.value, "\n")
break
}
for (i in 0:60) {
cat("Lag:",i, " P value:", tseries::adf.test(open_prices, k = i)$p.value, "\n")
break
}
for (i in 0:60) {
cat("Lag:",i, ". P value:", tseries::adf.test(open_prices, k = i)$p.value, "\n")
break
}
for (i in 0:60) {
cat("Lag:",i, "P value:", tseries::adf.test(open_prices, k = i)$p.value, "\n")
break
}
for (i in 0:60) {
cat("Lag:",i , "| P value:", tseries::adf.test(open_prices, k = i)$p.value, "\n")
break
}
for (i in 0:60) {
cat("Lag:",i , "| P value:", tseries::adf.test(open_prices, k = i)$p.value, "\n")
}
?urca::ur.df
## Обыкновенный Дикки-Фуллер
ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 4)
## Обыкновенный Дикки-Фуллер
urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 4)
library(pracma) # Hurst exponent estimation
library(fracdiff) # for arfime
library(forecast) # for arfima and forecasting
library(tseries) # for kpss test (unit root)
library(urca) # for Dickey-Fuller unit root test
# Загрузка данных
stock_prices <- read.csv("./Data/American Companies/FORD 1994 2022.csv", na.strings =  "null")
open_prices <- stock_prices$Open
open_prices <- as.numeric(na.omit(open_prices))
# Проверка ряда на стационарность
## Аугментированный Дикки-Фулер
for (i in 0:60) {
cat("Lag:",i , "| P value:", tseries::adf.test(open_prices, k = i)$p.value, "\n")
}
## Обыкновенный Дикки-Фуллер
urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 4)
## Обыкновенный Дикки-Фуллер
summary(urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 4))
## Обыкновенный Дикки-Фуллер
summary(urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 20))
## Обыкновенный Дикки-Фуллер
summary(urca::ur.df(open_prices, type = "trend", lags = 20))
## Обыкновенный Дикки-Фуллер
summary(urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 20))
## Обыкновенный Дикки-Фуллер
summary(urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 60))
?tseries::kpss.test
summary(urca::ur.df(open_prices, type = "drift", selectlags = "BIC", lags = 60))
summary(urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 5))
summary(urca::ur.df(open_prices, type = "drift", selectlags = "BIC", lags = 5))
summary(urca::ur.df(open_prices, type = "trend", selectlags = "BIC", lags = 60))
summary(urca::ur.df(open_prices, type = "drift", selectlags = "BIC", lags = 60))
summary(urca::ur.df(open_prices, type = "none", selectlags = "BIC", lags = 60))
## Текст KPSS
summary(tseries::kpss.test(open_prices, null = "Level"))
## Текст KPSS
tseries::kpss.test(open_prices, null = "Level")
tseries::kpss.test(open_prices, null = "Trend")
?tseries::kpss.test
## Текст KPSS
tseries::kpss.test(open_prices, null = "Level", lshort = TRUE)
## Текст KPSS
tseries::kpss.test(open_prices, null = "Level", lshort = F)
tseries::kpss.test(open_prices, null = "Trend", lshort = F)
?diff
# Переход к первым разностям
open_prices_d1 <- diff(open_prices)
for (i in 0:60) {
cat("Lag:",i , "| P value:", tseries::adf.test(open_prices_d1, k = i)$p.value, "\n")
}
summary(urca::ur.df(open_prices_d1, type = "trend", selectlags = "BIC", lags = 60))
summary(urca::ur.df(open_prices_d1, type = "drift", selectlags = "BIC", lags = 60))
summary(urca::ur.df(open_prices_d1, type = "none", selectlags = "BIC", lags = 60))
tseries::kpss.test(open_prices_d1, null = "Level", lshort = F)
tseries::kpss.test(open_prices_d1, null = "Trend", lshort = F)
# рисуем первые разности
ts.plot(open_prices_d1)
?ts.plot
# рисуем первые разности
ts.plot(open_prices_d1, gpars = list(xy.labels = c("Value", "Date")))
# рисуем первые разности
ts.plot(open_prices_d1, gpars = list(xy.label = c("Value", "Date")))
length(open_prices_d1)
length(dates)
dates <- as.Date(stock_prices$Date, "%d.%m.%y")
# рисуем первые разности
ts.plot(dates, open_prices_d1)
# рисуем первые разности
plot.ts(dates, open_prices_d1)
length(dates)
length(open_prices_d1)
dates_d1 <- dates[-1]
# рисуем первые разности
plot.ts(dates_d1, open_prices_d1)
# рисуем первые разности
plot.ts(dates_d1, open_prices_d1, type = "l")
# рисуем первые разности
plot.ts(open_prices_d1, type = "l")
?plot.ts
# рисуем первые разности
plot.ts(
c(dates_d1, open_prices_d1), type = "l")
# рисуем первые разности
plot.ts(
c(dates_d1, open_prices_d1), type = "l")
# рисуем первые разности
plot.ts(
list(dates_d1, open_prices_d1), type = "l")
# рисуем первые разности
plot.ts(open_prices_d1, type = "l")
# Рисуем ACF и PACF
acf(open_prices_d1, lag.max = 70)
pacf(open_prices_d1, lag.max = 70)
pacf(open_prices, lag.max = 70)
## Для исходного ряда
acf(open_prices, lag.max = 70)
pacf(open_prices, lag.max = 70)
# Вычисляем экспоненту Хёрста
hurstexp(open_prices_d1, d = 10)
fracdiff(open_prices_d1)
summary(fracdiff(open_prices_d1))
summary(fracdiff(open_prices))
str(c(min, max))
fun_list <- str(c(min, max))
fun_list <- str(c(min, max))
fun_list[0]
fun_list[1]
fun_list <- c(min, max)
fun_list
fun_list[1]
fun_list[2]
sapply(fun_list, function(f) f(1:10))
?apply
apply(fun_list, MARGIN = 1, function(f) f(1:10))
apply(fun_list, MARGIN = 2, function(f) f(1:10))
dim(fun_list)
sapply(fun_list, function(f) f(1:10))
(function(x) x ** 2)
methods(plot)
# Просмотр методов, опредленных для некоторой функции
methods(plot)
# Просмотр методов, опредленных для некоторой функции
methods(plot)
